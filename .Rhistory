# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
intro <- paste("Hello my name is ", name, "and I'm ", age, " years old.", sep = " ")
intro
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello my name is", "Hey I'm ", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value <- value * 2
return(value)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
cube <- (number)^3
return(cube)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Lion King", "Kill Bill", "TItanic", "Jurassic Park", "Mulan", "The Blind Side")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!", sep = " ")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- c(movies[1:3], movies[5:6])
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- c(500:699)
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- as.Date(Sys.Date())
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2017). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
days_to_break
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string) {
non_digit <- trimws(gsub("[0-9]", "", string), which = "both")
return(non_digit)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
letter <- remove_digits(c("INFO 201", "CSE 142"))
capitalized
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".",sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", collapse = NULL))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be", age + 1, ".", sep = " "))
}
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, "days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), "In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday_intro
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, birthday) {
birthday <- as.Date(birthday)
days_left <- birthday - today
return(paste0(make_introduction(name, age), " In ", days_left, " days I'll be ", age + 1, "."))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2018-07-29")
my_bday
my_bday_intro
styler:::style_active_file()
rm(list = ls())
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
# Which city was flown to with the highest average speed?
highest_speed <- flights %>%
library(httr)
library(jsonlite)
library(dplyr)
# Create a variable for the API's base URI (https://api.github.com)
api <- get("https://api.github.com")
# Create a variable for the API's base URI (https://api.github.com)
base_uri <- "https://api.github.com"
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resources <- "/orgs/info201repos"
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Under the "Repositories" category of the API,
# find the endpoint that will list repos in an organization. Then,
# Create a variable `resource` that stores the endpoint for the "info201"
# organization repos (this is the PATH to the resource of interest).
# (FYI: this is where we keep the book code and master exercise sets!)
resource <- "/orgs/info201repos"
rm(resources)
# Send a GET request to this endpoint (the `base_uri`` followed by `resource`)
response <- GET(paste0(base_uri, resource))
# Extract the "text" of the response usin the `content` function
body <- content(response, text)
# Extract the "text" of the response usin the `content` function
body <- content(response, "text")
# Convert the body from JSON into a data frame
info_repos <- fromJSON(body)
# How many (public) repositories does the organization have?
print(nrow(info_repos))
View(info_repos)
# Use a "Search" endpoint to search for repositories about "graphics"
# (bonus: limit language to only "R" -- which requires a different syntax)
# (hint: https://developer.github.com/v3/search/#search-repositories)
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query_params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query_params <- list(q = "graphics+language:R")
# Send a GET request to this endpoint--including your params list as the `query`
response <- GET(paste0(base_uri, resource), query = query_params)
body <- content(response, "text")
results <- fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
print(results$total_count)
vis_repo_names <- results$items$full_name[1:5]
print(vis_repo_names)
shiny::runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
shiny::runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
runApp('Z:/info 201/a8-shiny-rafael-agas')
library(dplyr)
library(plotly)
library(jsonlite)
library(httr)
library(RColorBrewer)
source("apikey_raf.r")
# Sets up the parameters and queries for the API and
# GET request
base_uri <- "https://api.nasa.gov/neo/rest/v1/neo/"
resource <- "browse"
endpoint <- paste0(base_uri, resource)
# Performs the GET request to retrieve the information from
# the NASA API
response <- GET(endpoint, query = query_params)
query_params <- list(api_key = apikey)
body <- content(response, "text")
results <- fromJSON(body)
objects <- list()
# Initiates the binding of multiple dataframes into one dataframe
almost_done <- objects2[[1]]
# Combines all the dataframes together
for (i in 2:length(objects2)) {
almost_done <- rbind(almost_done, objects2[[i]])
}
# Initiates the binding of multiple dataframes into one datframe
getting_there <- objects[[1]]
# Extracts the dataframes from the list in close_approach_data
# Empty list for the dataframes to be stored in
objects2 <- list()
# Combines all the dataframes together
for (i in 2:length(objects)) {
getting_there <- rbind(getting_there, objects[[i]])
}
get_graphic <- function() {
plot_ly(completed, x = completed$Approach.Date,
y = completed$Maximum.Estimated.Diameter..km.,
text = paste("Name:", completed$name,
"<br>Size:", completed$Maximum.Estimated.Diameter..km.,
"km",
"<br>Speed:", completed$Relative.Velocity..km.hr.,
"km/hr",
"<br>Approach Date:", completed$Approach.Date),
type = "scatter", mode = "markers", color = completed$name,
marker = list(size = (as.numeric(completed$Miss.Distance..km.)
/ 1000000),
color = brewer.pal(12, "Paired")),
symbol = "circle") %>%
layout(title = "Asteroid Graphic",
xaxis = list(showgrid = FALSE,
title = "Approach Date"),
yaxis = list(showgrid = FALSE,
title = "Maximum Diameter in Kilometers"))
}
approach <- near_earth_objects %>% select(name, close_approach_data)
# All the known data about the closest object to Earth
near_earth_objects <- results$near_earth_objects
# A single dataframe containing all the information
completed <- left_join(almost_done, getting_there)
# Extracts the Miss Distance information from the original dataframe
# and puts it into its own list for easier access
# and adds an empty dataframe into the list if there is no data found
# in order to maintain the same amount of rows
for (i in 1:nrow(near_earth_objects)) {
# Number of different information for a single asteroid
last <- length(approach$close_approach_data[[i]][["miss_distance"]])
if (last > 0) {
for (j in 1:last) {
objects2[[i]] <- data.frame(
"name" = approach$name[[i]],
"Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
"Miss Distance (mi)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
"Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
"Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
"Approach Date" = approach$close_approach_data[[i]][["close_approach_date"]],
stringsAsFactors = FALSE
)
}
} else {
objects2[[i]] <- data.frame()
}
}
graph <- get_graphic()
for (i in 1:nrow(near_earth_objects)) {
objects[[i]] <- data.frame(
"name" = near_earth_objects$name[[i]],
"Absolute Magnitude" = near_earth_objects$absolute_magnitude_h[[i]],
"Minimum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_min[[i]],
"Maximum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_max[[i]],
"Dangerous?" = near_earth_objects$is_potentially_hazardous_asteroid[[i]],
stringsAsFactors = FALSE
)
}
# Performs the GET request to retrieve the information from
# the NASA API
response <- GET(endpoint, query = query_params)
query_params <- list(api_key = apikey)
setwd("Z:/info 201/Info-201-Final-Project")
source("apikey_raf.r")
# Sets up the parameters and queries for the API and
# GET request
base_uri <- "https://api.nasa.gov/neo/rest/v1/neo/"
resource <- "browse"
query_params <- list(api_key = apikey)
endpoint <- paste0(base_uri, resource)
# Performs the GET request to retrieve the information from
# the NASA API
response <- GET(endpoint, query = query_params)
body <- content(response, "text")
# Performs the GET request to retrieve the information from
# the NASA API
response <- GET(endpoint, query = query_params)
body <- content(response, "text")
results <- fromJSON(body)
# All the known data about the closest object to Earth
near_earth_objects <- results$near_earth_objects
objects <- list()
for (i in 1:nrow(near_earth_objects)) {
objects[[i]] <- data.frame(
"name" = near_earth_objects$name[[i]],
"Absolute Magnitude" = near_earth_objects$absolute_magnitude_h[[i]],
"Minimum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_min[[i]],
"Maximum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_max[[i]],
"Dangerous?" = near_earth_objects$is_potentially_hazardous_asteroid[[i]],
stringsAsFactors = FALSE
)
}
# Extracts the dataframes from the list in close_approach_data
# Empty list for the dataframes to be stored in
objects2 <- list()
approach <- near_earth_objects %>% select(name, close_approach_data)
# Extracts the Miss Distance information from the original dataframe
# and puts it into its own list for easier access
# and adds an empty dataframe into the list if there is no data found
# in order to maintain the same amount of rows
for (i in 1:nrow(near_earth_objects)) {
# Number of different information for a single asteroid
last <- length(approach$close_approach_data[[i]][["miss_distance"]])
if (last > 0) {
for (j in 1:last) {
objects2[[i]] <- data.frame(
"name" = approach$name[[i]],
"Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
"Miss Distance (mi)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
"Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
"Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
"Approach Date" = approach$close_approach_data[[i]][["close_approach_date"]],
stringsAsFactors = FALSE
)
}
} else {
objects2[[i]] <- data.frame()
}
}
# Initiates the binding of multiple dataframes into one dataframe
almost_done <- objects2[[1]]
# Combines all the dataframes together
for (i in 2:length(objects2)) {
almost_done <- rbind(almost_done, objects2[[i]])
}
# Initiates the binding of multiple dataframes into one datframe
getting_there <- objects[[1]]
# Combines all the dataframes together
for (i in 2:length(objects)) {
getting_there <- rbind(getting_there, objects[[i]])
}
# A single dataframe containing all the information
completed <- left_join(almost_done, getting_there)
get_graphic <- function() {
plot_ly(completed, x = completed$Approach.Date,
y = completed$Maximum.Estimated.Diameter..km.,
text = paste("Name:", completed$name,
"<br>Size:", completed$Maximum.Estimated.Diameter..km.,
"km",
"<br>Speed:", completed$Relative.Velocity..km.hr.,
"km/hr",
"<br>Approach Date:", completed$Approach.Date),
type = "scatter", mode = "markers", color = completed$name,
marker = list(size = (as.numeric(completed$Miss.Distance..km.)
/ 1000000),
color = brewer.pal(12, "Paired")),
symbol = "circle") %>%
layout(title = "Asteroid Graphic",
xaxis = list(showgrid = FALSE,
title = "Approach Date"),
yaxis = list(showgrid = FALSE,
title = "Maximum Diameter in Kilometers"))
}
graph <- get_graphic()
graph
