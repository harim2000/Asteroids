> # Extracts the dataframes from the list in close_approach_data
> objects2 <- list()
> # Extracts the Miss Distance information from the original dataframe
> # and puts it into its own list for easier access
> for (i in 1:nrow(near_earth_objects)) {
+
+   last <- length(approach$close_approach_data[[i]][["miss_distance"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects2[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects2[[i]] <- data.frame()
+
+   }
+ }
> View(objects2)
> objects3 <- list()
> for (i in 1:nrow(near_earth_objects)) {
+
+   last <- length(approach$close_approach_data[[i]][["relative_velocity"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects3[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
+         "Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects3[[i]] <- data.frame()
+   }
+ }
> asdf <- full_join(objects[[1]], objects2[[1]])
Joining, by = "name"
> View(asdf)
> class(asdf)
[1] "data.frame"
> rm(asdf)
> # Extracts the dataframes from the list in close_approach_data
> # Empty list for the dataframes to be stored in
> objects2 <- list()
> # Extracts the Miss Distance information from the original dataframe
> # and puts it into its own list for easier access
> for (i in 1:nrow(near_earth_objects)) {
+
+   last <- length(approach$close_approach_data[[i]][["miss_distance"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects2[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
+         "Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
+         "Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects2[[i]] <- data.frame()
+
+   }
+ }
> View(objects2)
> rm(objects3)
> length(approach$close_approach_data[[i]][["miss_distance"]])
[1] 0
> length(approach$close_approach_data[[10]][["miss_distance"]])
[1] 4
> length(approach$close_approach_data[[10]][["close_approach_date"]])
[1] 4
> # Extracts the dataframes from the list in close_approach_data
> # Empty list for the dataframes to be stored in
> objects2 <- list()
> # Extracts the Miss Distance information from the original dataframe
> # and puts it into its own list for easier access
> # and adds an empty dataframe into the list if there is no data found
> # in order to maintain the same amount of rows
> for (i in 1:nrow(near_earth_objects)) {
+
+   # Number of different information for a single asteroid
+   last <- length(approach$close_approach_data[[i]][["miss_distance"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects2[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
+         "Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
+         "Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
+         "Approach Date" = approach$close_approach_data[[i]][["relative_velocity"]][["close_approach_date"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects2[[i]] <- data.frame()
+
+   }
+ }
Error in data.frame(name = approach$name[[i]], `Miss Distance (km)` = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],  :
arguments imply differing number of rows: 1, 0
> length(approach$close_approach_data[[10]][["close_approach_date"]])
[1] 4
> length(approach$close_approach_data[[10]][["miss_distance"]])
[1] 4
> View(results)
> # Extracts the Miss Distance information from the original dataframe
> # and puts it into its own list for easier access
> # and adds an empty dataframe into the list if there is no data found
> # in order to maintain the same amount of rows
> for (i in 1:nrow(near_earth_objects)) {
+
+   # Number of different information for a single asteroid
+   last <- length(approach$close_approach_data[[i]][["miss_distance"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects2[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
+         "Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
+         "Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
+         "Approach Date" = approach$close_approach_data[[i]][["close_approach_date"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects2[[i]] <- data.frame()
+
+   }
+ }
> View(objects2)
> View(objects2)
> adsf <- rbind(objects2[[1]], objects[[2]])
Error in rbind(deparse.level, ...) :
numbers of columns of arguments do not match
> adsf <- rbind(objects2[[1]], objects2[[2]])
> View(adsf)
> completed <- objects2[[1]]
> rm(asdf)
Warning message:
In rm(asdf) : object 'asdf' not found
> rm(adsf)
> length(objects2)
[1] 20
> 2:20
[1]  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20
> for (i in 2:length(objects2)) {
+   rbind(completed, objects2[[i]])
+ }
> for (i in 2:length(objects2)) {
+   completed <- rbind(completed, objects2[[i]])
+ }
> View(completed)
> colnames(compelted)
Error in is.data.frame(x) : object 'compelted' not found
> colnames(completed)
[1] "name"                      "Miss.Distance..km."        "Miss.Distance..km..1"      "Relative.Velocity..km.hr."
[5] "Relative.Velocity..m.hr."  "Approach.Date"
> # Extracts the dataframes from the list in close_approach_data
> # Empty list for the dataframes to be stored in
> objects2 <- list()
> approach <- near_earth_objects %>% select(name, close_approach_data)
> # Extracts the Miss Distance information from the original dataframe
> # and puts it into its own list for easier access
> # and adds an empty dataframe into the list if there is no data found
> # in order to maintain the same amount of rows
> for (i in 1:nrow(near_earth_objects)) {
+
+   # Number of different information for a single asteroid
+   last <- length(approach$close_approach_data[[i]][["miss_distance"]])
+
+   if (last > 0) {
+     for (j in 1:last) {
+       objects2[[i]] <- data.frame(
+         "name" = approach$name[[i]],
+         "Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
+         "Miss Distance (mi)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
+         "Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
+         "Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
+         "Approach Date" = approach$close_approach_data[[i]][["close_approach_date"]],
+         stringsAsFactors = FALSE
+       )
+     }
+   } else {
+     objects2[[i]] <- data.frame()
+
+   }
+ }
> # Initiates the binding of multiple dataframes into one dataframe
> completed <- objects2[[1]]
> for (i in 2:length(objects2)) {
+   completed <- rbind(completed, objects2[[i]])
+ }
> View(completed)
> asdf <- full_join(objects2, objects)
Error in UseMethod("full_join") :
no applicable method for 'full_join' applied to an object of class "list"
> View(objects)
> asdf <- full_join(objects2, objects[[1]])
Error in UseMethod("full_join") :
no applicable method for 'full_join' applied to an object of class "list"
> asdf <- full_join(objects2, objects[[1]])
Error in UseMethod("full_join") :
no applicable method for 'full_join' applied to an object of class "list"
> class(objects[[1]])
[1] "data.frame"
> asdf <- full_join(completed, objects[[1]])
Joining, by = "name"
> View(asdf)
> # Initiates the binding of multiple dataframes into one dataframe
> almost_done <- objects2[[1]]
> # Combines all the dataframes together
> for (i in 2:length(objects2)) {
+   almost_done <- rbind(completed, objects2[[i]])
+ }
> View(almost_done)
> for(i in 1:length(objects)) {
+   completed <- rbind(almost_done, objects[[i]])
+ }
Error in rbind(deparse.level, ...) :
numbers of columns of arguments do not match
> for(i in 1:length(objects)) {
+   completed <- full_join(almost_done, objects[[i]])
+ }
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
Joining, by = "name"
> View(completed)
> completed <- left_join(almost_done, objects[[1]])
Joining, by = "name"
> View(completed)
> completed <- left_joind(compelted, objects[[2]])
Error in left_joind(compelted, objects[[2]]) :
could not find function "left_joind"
> completed <- left_join(compelted, objects[[2]])
Error in left_join(compelted, objects[[2]]) :
object 'compelted' not found
> completed <- left_join(completed, objects[[2]])
Joining, by = c("name", "Absolute.Magnitude", "Minimum.Estimated.Diameter..km.", "Minimum.Estimated.Diameter..m.", "Minimum.Estimated.Diameter..mi.", "Maximum.Estimated.Diameter..km.", "Maximum.Estimated.Diameter..m.", "Maximum.Estimated.Diameter..mi.", "Dangerous.")
> View(completed)
> completed <- left_join(completed, objects[[2]])
Joining, by = c("name", "Absolute.Magnitude", "Minimum.Estimated.Diameter..km.", "Minimum.Estimated.Diameter..m.", "Minimum.Estimated.Diameter..mi.", "Maximum.Estimated.Diameter..km.", "Maximum.Estimated.Diameter..m.", "Maximum.Estimated.Diameter..mi.", "Dangerous.")
> completed <- left_join(completed, objects[[2]], by = "name")
> View(completed)
> rm(completed)
>
> # Initiates the binding of multiple dataframes into one dataframe
> almost_done <- objects2[[1]]
> # Combines all the dataframes together
> for (i in 2:length(objects2)) {
+   almost_done <- rbind(almost_done, objects2[[i]])
+ }
> View(almost_done)
> getting_there <- objects[[1]]
> for (i in 2:length(objects)) {
+   getting_there <- rbind(getting_there, objects[[i]])
+ }
> View(getting_there)
> completed <- left_join(almost_done, getting_there)
Joining, by = "name"
> View(completed)
> rm(asdf)
> install.packages(tripack)
Error in install.packages : object 'tripack' not found
> install.packages("tripack")
Installing package into ‘C:/Users/itzra/OneDrive/Documents/R/win-library/3.4’
(as ‘lib’ is unspecified)
trying URL 'https://cran.rstudio.com/bin/windows/contrib/3.4/tripack_1.3-8.zip'
Content type 'application/zip' length 445357 bytes (434 KB)
downloaded 434 KB
package ‘tripack’ successfully unpacked and MD5 sums checked
The downloaded binary packages are in
C:\Users\itzra\AppData\Local\Temp\RtmpwNuPxQ\downloaded_packages
> library(tripack)
> x <- list()
> for (i in 1:nrow(completed)) {
+   list[[i]] <- data.frame("X" = 0)
+ }
Error in list[[i]] <- data.frame(X = 0) :
object of type 'builtin' is not subsettable
> list[[i]] <- data.frame("X" = 0,
+                           stringsAsFactors = FALSE)
Error in list[[i]] <- data.frame(X = 0, stringsAsFactors = FALSE) :
object of type 'builtin' is not subsettable
> for (i in 1:nrow(completed)) {
+   x[[i]] <- data.frame("X" = 0,
+                           stringsAsFactors = FALSE)
+ }
> View(x)
> X <- x[[1]]
> for (i in 2:length(x)) {
+   X <- rbind(X, x[[i]])
+ }
> View(X)
> rm(X
+    )
> X_coordinates <- x[[1]]
> for (i in 2:length(x)) {
+   X_coordinates <- rbind(X_coordinates, x[[i]])
+ }
> View(X_coordinates)
> plot <- voronoi.mosaic(X_coordinates$X, completed$Miss.Distance..km.)
Error in r[i1] - r[-length(r):-(length(r) - lag + 1L)] :
non-numeric argument to binary operator
> colnames(completed)
[1] "name"                            "Miss.Distance..km."              "Miss.Distance..mi."              "Relative.Velocity..km.hr."
[5] "Relative.Velocity..m.hr."        "Approach.Date"                   "Absolute.Magnitude"              "Minimum.Estimated.Diameter..km."
[9] "Minimum.Estimated.Diameter..m."  "Minimum.Estimated.Diameter..mi." "Maximum.Estimated.Diameter..km." "Maximum.Estimated.Diameter..m."
[13] "Maximum.Estimated.Diameter..mi." "Dangerous."
> plot <- voronoi.mosaic(X_coordinates$X, completed[["Miss.Distance..km"]])
Error: $ operator is invalid for atomic vectors
> plot <- voronoi.mosaic(X_coordinates[["X"]], completed[["Miss.Distance..km"]])
Error: $ operator is invalid for atomic vectors
> plot <- voronoi.mosaic(X_coordinates$X, completed$Miss.Distance..km.)
Error in r[i1] - r[-length(r):-(length(r) - lag + 1L)] :
non-numeric argument to binary operator
library(dplyr)
library(ggplot2)
library(plotly)
library(jsonlite)
library(httr)
library(tripack)
source("apikey_raf.r")
# Sets up the parameters and queries for the API and
# GET request
base_uri <- "https://api.nasa.gov/neo/rest/v1/neo/"
resource <- "browse"
query_params <- list(api_key = apikey)
endpoint <- paste0(base_uri, resource)
# Performs the GET request to retrieve the information from
# the NASA API
response <- GET(endpoint, query = query_params)
body <- content(response, "text")
results <- fromJSON(body)
# All the known data about the closest object to Earth
near_earth_objects <- results$near_earth_objects
objects <- list()
for (i in 1:nrow(near_earth_objects)) {
objects[[i]] <- data.frame(
"name" = near_earth_objects$name[[i]],
"Absolute Magnitude" = near_earth_objects$absolute_magnitude_h[[i]],
"Minimum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_min[[i]],
"Minimum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_min[[i]],
"Maximum Estimated Diameter (km)" =
near_earth_objects$estimated_diameter$kilometers$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (m)" =
near_earth_objects$estimated_diameter$meters$estimated_diameter_max[[i]],
"Maximum Estimated Diameter (mi)" =
near_earth_objects$estimated_diameter$miles$estimated_diameter_max[[i]],
"Dangerous?" = near_earth_objects$is_potentially_hazardous_asteroid[[i]],
stringsAsFactors = FALSE
)
}
# Extracts the dataframes from the list in close_approach_data
# Empty list for the dataframes to be stored in
objects2 <- list()
approach <- near_earth_objects %>% select(name, close_approach_data)
# Extracts the Miss Distance information from the original dataframe
# and puts it into its own list for easier access
# and adds an empty dataframe into the list if there is no data found
# in order to maintain the same amount of rows
for (i in 1:nrow(near_earth_objects)) {
# Number of different information for a single asteroid
last <- length(approach$close_approach_data[[i]][["miss_distance"]])
if (last > 0) {
for (j in 1:last) {
objects2[[i]] <- data.frame(
"name" = approach$name[[i]],
"Miss Distance (km)" = approach$close_approach_data[[i]][["miss_distance"]][["kilometers"]],
"Miss Distance (mi)" = approach$close_approach_data[[i]][["miss_distance"]][["miles"]],
"Relative Velocity (km/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["kilometers_per_hour"]],
"Relative Velocity (m/hr)" = approach$close_approach_data[[i]][["relative_velocity"]][["miles_per_hour"]],
"Approach Date" = approach$close_approach_data[[i]][["close_approach_date"]],
stringsAsFactors = FALSE
)
}
} else {
objects2[[i]] <- data.frame()
}
}
# Initiates the binding of multiple dataframes into one dataframe
almost_done <- objects2[[1]]
# Combines all the dataframes together
for (i in 2:length(objects2)) {
almost_done <- rbind(almost_done, objects2[[i]])
}
# Initiates the binding of multiple dataframes into one datframe
getting_there <- objects[[1]]
# Combines all the dataframes together
for (i in 2:length(objects)) {
getting_there <- rbind(getting_there, objects[[i]])
}
# A single dataframe containing all the information
completed <- left_join(almost_done, getting_there)
# A dataframe for the x_coordinate of the graph
# The Zero represents the position of Earth
# relative to the miss distance of each asteroid
x <- list()
for (i in 1:nrow(completed)) {
x[[i]] <- data.frame("X" = 0,
stringsAsFactors = FALSE)
}
X_coordinates <- x[[1]]
for (i in 2:length(x)) {
X_coordinates <- rbind(X_coordinates, x[[i]])
}
plot <- voronoi.mosaic(X_coordinates$X, completed$Miss.Distance..km.)
plot <- voronoi.mosaic(completed$Miss.Distance..mi., X_coordinates$X)
plot <- voronoi.mosaic(as.numeric(completed$Miss.Distance..mi.), as.numeric(X_coordinates$X))
plot <- voronoi.mosaic(as.numeric(X_coordinates$X), as.numeric(completed$Miss.Distance..mi.))
plot <- voronoi.mosaic(as.numeric(X_coordinates$X),
as.numeric(completed$Miss.Distance..mi.),
duplicate = "strip")
class(X_coordinates$X)
class(X_coordinates)
class(completed$Miss.Distance..mi.)
o
plot <- voronoi.mosaic(as.numeric(X_coordinates),
as.numeric(completed$Miss.Distance..mi.))
plot <- voronoi.mosaic(as.numeric(X_coordinates),
completed$Miss.Distance..mi.)
plot <- voronoi.mosaic(as.numeric(X_coordinates),
as.numeric(completed$Miss.Distance..mi.))
plot <- voronoi.mosaic(as.numeric(X_coordinates),
as.numeric(as.character(completed$Miss.Distance..mi.)))
class(completed$Miss.Distance..mi.)
completed$Miss.Distance..km.
y_coordinates <- completed %>% select(Miss.Distance..km)
y_coordinates <- completed %>% select(Miss.Distance..km.)
class(y_coordinates)
plot <- voronoi.mosaic(as.numeric(X_coordinates),
as.numeric(y_coordinates))
class(y_coordinates[[1]])
as.numeric(y_coordinates[[1]])
y_coordinates <- completed %>% select(Miss.Distance..km.) %>% as.numeric()
y_coordinates <- as.numeric(completed$Miss.Distance..km.)
y_coordinates <- as.numeric(completed$Miss.Distance..km.)
View(objects2)
class(y_coordinates)
plot <- voronoi.mosaic(as.numeric(X_coordinates),
y_coordinates)
class(X_coordinates)
class(X_coordinates[[1]])
class(X_coordinates[[X]])
class(X_coordinates[["X"]])
y_coordinates
plot <- voronoi.mosaic(X_coordinates$X,
y_coordinates)
plot <- voronoi.mosaic(X_coordinates$X,
y_coordinates)
plot(X_coordinates, y_coordinates)
plot(X_coordinates, completed$Miss.Distance..mi.)
plot(completed$name, completed$Miss.Distance..mi.)
hist(completed$name, completed$Miss.Distance..mi.)
ggplot(completed) +
geom_col(mapping = aes(x = completed$name))
ggplot(completed) +
geom_col(mapping = aes(x = completed$name, fill = completed$Miss.Distance..km.))
ggplot(completed) +
geom_col(mapping = aes(x = completed$name, y = completed$Miss.Distance..km.))
install.packages("heatmaply")
library(heatmaply)
heatmaply(completed) %>% layout(margin = list(l = 130, b = 40))
devtools::install_github("ropensci/plotly")
devtools::install_github('talgalili/heatmaply')
heatmaply(completed)
heatmaply(completed)
heatmaply(completed)
install.packages("ggplot2")
library(ggplot2)
library(plotly)
heatmaply(completed)
heatmaply(completed) %>% layout(margin = list(l = 130, b = 40))
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
ggplot(completed) +
geom_col(mapping = aes(x = completed$name, y = completed$Miss.Distance..km.))
